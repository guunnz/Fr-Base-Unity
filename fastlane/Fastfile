# fastlane/Fastfile
keychain_name = "temporary_keychain"
keychain_password = SecureRandom.base64

def update_xcode_project_format
  require 'xcodeproj'

  project_path = ENV['IOS_BUILD_PATH'] + '/iOS/Unity-iPhone.xcodeproj'
  project = Xcodeproj::Project.open(project_path)

  # Traverse the project objects to find the PBXProject object
  project.main_group.project.objects.each do |object|
    if object.isa == "PBXProject"
      object.attributes["LastUpgradeCheck"] = "1410" # Xcode 13.2 value
      object.attributes["objectVersion"] = "57" # Xcode 13.2 value
    end
  end

  project.save
end

def update_pods_project_format
  require 'xcodeproj'

  project_path = ENV['IOS_BUILD_PATH'] + '/iOS/Pods/Pods.xcodeproj'
  project = Xcodeproj::Project.open(project_path)

  # Traverse the project objects to find the PBXProject object
  project.main_group.project.objects.each do |object|
    if object.isa == "PBXProject"
      object.attributes["LastUpgradeCheck"] = "1410" # Xcode 13.2 value
      object.attributes["objectVersion"] = "57" # Xcode 13.2 value
    end
  end

  project.save
end


def update_deployment_target(project_path, deployment_target, targets: nil)
  require 'xcodeproj'
  
  project = Xcodeproj::Project.open(project_path)
  project.targets.each do |target|
    if targets.nil? || targets.include?(target.name)
      target.build_configurations.each do |config|
        config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = deployment_target
      end
    end
  end
  project.save
end


platform :android do
  desc "Upload a new Android version to the Google Play Store"
  lane :internal do
    upload_to_play_store(track: 'internal',release_status: 'completed',aab: "#{ENV['ANDROID_BUILD_FILE_PATH']}")
  end
  lane :alpha do
    upload_to_play_store(track: 'alpha',release_status: 'completed',aab: "#{ENV['ANDROID_BUILD_FILE_PATH']}")
  end
end
  
platform :ios do
  desc "Push a new release build to the App Store"
  lane :release do
    build
    api_key = app_store_connect_api_key(
      key_id: "#{ENV['APPSTORE_KEY_ID']}",
      issuer_id: "#{ENV['APPSTORE_ISSUER_ID']}",
      key_filepath: "#{ENV['APPSTORE_P8_PATH']}",
      duration: 1200, # optional
      in_house: false, # true for enterprise and false for individual accounts
    )
    upload_to_app_store(api_key: api_key)
  end

  desc "Submit a new Beta Build to Apple TestFlight"
  lane :beta do
   
    # Automate Missing export compliance error
    # update_info_plist(
    #   xcodeproj: "#{ENV['IOS_BUILD_PATH']}/iOS/Unity-iPhone.xcodeproj",
    #   plist_path: "Info.plist",
    #   block: proc do |plist|
    #     plist['ITSAppUsesNonExemptEncryption'] = false
    #   end
    # )
    build
    api_key = app_store_connect_api_key(
      key_id: "#{ENV['APPSTORE_KEY_ID']}",
      issuer_id: "#{ENV['APPSTORE_ISSUER_ID']}",
      key_filepath: "#{ENV['APPSTORE_P8_PATH']}",
      duration: 1200, # optional
      in_house: false, # true for enterprise and false for individual accounts
    )
    upload_to_testflight(
      skip_waiting_for_build_processing: true,
      api_key: api_key,
      uses_non_exempt_encryption: false
    )
  end

  desc "Create .ipa"
  lane :build do
    
    cocoapods(
    clean_install: true,
    podfile: "#{ENV['IOS_BUILD_PATH']}/iOS/"
  ) do |installer|
      
    installer.pods_project.targets.each do |target|
      target.build_configurations.each do |config|

        # Mute Xcode os-deprecation warnings
        if config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] == '8.0'
          config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '11.0'
        end

        if config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] == '9.0'
          config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '11.0'
        end

        if config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] == '10.0'
          config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '11.0'
        end

        # Signing configuration
        config.build_settings['DEVELOPMENT_TEAM'] = ENV['APPLE_TEAM_ID']
        config.build_settings['CODE_SIGN_STYLE'] = 'Manual'
      end
    end
  end
  
    update_deployment_target("#{ENV['IOS_BUILD_PATH']}/iOS/Unity-iPhone.xcodeproj", '11.0')
    update_deployment_target("#{ENV['IOS_BUILD_PATH']}/iOS/Pods/Pods.xcodeproj", '11.0')
    update_xcode_project_format()
    update_pods_project_format()
    update_code_signing_settings(use_automatic_signing: false, path: "#{ENV['IOS_BUILD_PATH']}/iOS/Unity-iPhone.xcodeproj")
    certificates
    update_project_provisioning(
      xcodeproj: "#{ENV['IOS_BUILD_PATH']}/iOS/Unity-iPhone.xcodeproj",
      target_filter: "Unity-iPhone",
      profile: ENV["sigh_#{ENV["IOS_APP_ID"]}_appstore_profile-path"],
      code_signing_identity: "Apple Distribution: #{ENV['APPLE_TEAM_NAME']} (#{ENV['APPLE_TEAM_ID']})"
    )
    
    
  

    # increment_version_number(
    #   xcodeproj: "#{ENV['IOS_BUILD_PATH']}/iOS/Unity-iPhone.xcodeproj"
    # )
    # add_git_tag(
    #   tag: "v#{get_version_number(
    #     xcodeproj: "#{ENV['IOS_BUILD_PATH']}/iOS/Unity-iPhone.xcodeproj",
    #     target: "Unity-iPhone"
    #   )}"
    # )
    # push_git_tags
    gym(
      workspace: "#{ENV['IOS_BUILD_PATH']}/iOS/Unity-iPhone.xcworkspace",
      scheme: "Unity-iPhone",
      clean: true,
      skip_profile_detection: true,
      include_bitcode: false,
      codesigning_identity: "Apple Distribution: #{ENV['APPLE_TEAM_NAME']} (#{ENV['APPLE_TEAM_ID']})",
      export_method: "app-store",
      xcargs: "IPHONEOS_DEPLOYMENT_TARGET=11.0 CODE_SIGN_STYLE=Manual DEVELOPMENT_TEAM=#{ENV['APPLE_TEAM_ID']} ENABLE_BITCODE=NO",
      export_options: {
        method: "app-store",
        provisioningProfiles: {
          ENV["IOS_APP_ID"] => "match AppStore #{ENV['IOS_APP_ID']}"
        }
      }
    )

  end

  desc "Synchronize certificates"
  lane :certificates do
    cleanup_keychain
    create_keychain(
      name: keychain_name,
      password: keychain_password,
      default_keychain: true,
      lock_when_sleeps: true,
      timeout: 3600,
      unlock: true
    )
    match(
      type: "appstore",
      readonly: true,
      keychain_name: keychain_name,
      keychain_password: keychain_password,
      # force: true,
    )
  end

  lane :cleanup_keychain do
    if File.exist?(File.expand_path("~/Library/Keychains/#{keychain_name}-db"))
      delete_keychain(name: keychain_name)
    end
  end

  after_all do
    if File.exist?(File.expand_path("~/Library/Keychains/#{keychain_name}-db"))
      delete_keychain(name: keychain_name)
    end
  end
end
